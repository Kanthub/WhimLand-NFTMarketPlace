{"abi":[{"type":"function","name":"cancelOrders","inputs":[{"name":"orderKeys","type":"bytes32[]","internalType":"OrderKey[]"}],"outputs":[{"name":"successes","type":"bool[]","internalType":"bool[]"}],"stateMutability":"nonpayable"},{"type":"function","name":"editOrders","inputs":[{"name":"editDetails","type":"tuple[]","internalType":"struct LibOrder.EditDetail[]","components":[{"name":"oldOrderKey","type":"bytes32","internalType":"OrderKey"},{"name":"newOrder","type":"tuple","internalType":"struct LibOrder.Order","components":[{"name":"side","type":"uint8","internalType":"enum LibOrder.Side"},{"name":"saleKind","type":"uint8","internalType":"enum LibOrder.SaleKind"},{"name":"maker","type":"address","internalType":"address"},{"name":"nft","type":"tuple","internalType":"struct LibOrder.Asset","components":[{"name":"tokenId","type":"uint256","internalType":"uint256"},{"name":"collection","type":"address","internalType":"address"},{"name":"amount","type":"uint96","internalType":"uint96"}]},{"name":"price","type":"uint128","internalType":"Price"},{"name":"expiry","type":"uint64","internalType":"uint64"},{"name":"salt","type":"uint64","internalType":"uint64"}]}]}],"outputs":[{"name":"newOrderKeys","type":"bytes32[]","internalType":"OrderKey[]"}],"stateMutability":"payable"},{"type":"function","name":"makeOrders","inputs":[{"name":"newOrders","type":"tuple[]","internalType":"struct LibOrder.Order[]","components":[{"name":"side","type":"uint8","internalType":"enum LibOrder.Side"},{"name":"saleKind","type":"uint8","internalType":"enum LibOrder.SaleKind"},{"name":"maker","type":"address","internalType":"address"},{"name":"nft","type":"tuple","internalType":"struct LibOrder.Asset","components":[{"name":"tokenId","type":"uint256","internalType":"uint256"},{"name":"collection","type":"address","internalType":"address"},{"name":"amount","type":"uint96","internalType":"uint96"}]},{"name":"price","type":"uint128","internalType":"Price"},{"name":"expiry","type":"uint64","internalType":"uint64"},{"name":"salt","type":"uint64","internalType":"uint64"}]}],"outputs":[{"name":"newOrderKeys","type":"bytes32[]","internalType":"OrderKey[]"}],"stateMutability":"payable"},{"type":"function","name":"matchOrder","inputs":[{"name":"sellOrder","type":"tuple","internalType":"struct LibOrder.Order","components":[{"name":"side","type":"uint8","internalType":"enum LibOrder.Side"},{"name":"saleKind","type":"uint8","internalType":"enum LibOrder.SaleKind"},{"name":"maker","type":"address","internalType":"address"},{"name":"nft","type":"tuple","internalType":"struct LibOrder.Asset","components":[{"name":"tokenId","type":"uint256","internalType":"uint256"},{"name":"collection","type":"address","internalType":"address"},{"name":"amount","type":"uint96","internalType":"uint96"}]},{"name":"price","type":"uint128","internalType":"Price"},{"name":"expiry","type":"uint64","internalType":"uint64"},{"name":"salt","type":"uint64","internalType":"uint64"}]},{"name":"buyOrder","type":"tuple","internalType":"struct LibOrder.Order","components":[{"name":"side","type":"uint8","internalType":"enum LibOrder.Side"},{"name":"saleKind","type":"uint8","internalType":"enum LibOrder.SaleKind"},{"name":"maker","type":"address","internalType":"address"},{"name":"nft","type":"tuple","internalType":"struct LibOrder.Asset","components":[{"name":"tokenId","type":"uint256","internalType":"uint256"},{"name":"collection","type":"address","internalType":"address"},{"name":"amount","type":"uint96","internalType":"uint96"}]},{"name":"price","type":"uint128","internalType":"Price"},{"name":"expiry","type":"uint64","internalType":"uint64"},{"name":"salt","type":"uint64","internalType":"uint64"}]}],"outputs":[],"stateMutability":"payable"},{"type":"function","name":"matchOrders","inputs":[{"name":"matchDetails","type":"tuple[]","internalType":"struct LibOrder.MatchDetail[]","components":[{"name":"sellOrder","type":"tuple","internalType":"struct LibOrder.Order","components":[{"name":"side","type":"uint8","internalType":"enum LibOrder.Side"},{"name":"saleKind","type":"uint8","internalType":"enum LibOrder.SaleKind"},{"name":"maker","type":"address","internalType":"address"},{"name":"nft","type":"tuple","internalType":"struct LibOrder.Asset","components":[{"name":"tokenId","type":"uint256","internalType":"uint256"},{"name":"collection","type":"address","internalType":"address"},{"name":"amount","type":"uint96","internalType":"uint96"}]},{"name":"price","type":"uint128","internalType":"Price"},{"name":"expiry","type":"uint64","internalType":"uint64"},{"name":"salt","type":"uint64","internalType":"uint64"}]},{"name":"buyOrder","type":"tuple","internalType":"struct LibOrder.Order","components":[{"name":"side","type":"uint8","internalType":"enum LibOrder.Side"},{"name":"saleKind","type":"uint8","internalType":"enum LibOrder.SaleKind"},{"name":"maker","type":"address","internalType":"address"},{"name":"nft","type":"tuple","internalType":"struct LibOrder.Asset","components":[{"name":"tokenId","type":"uint256","internalType":"uint256"},{"name":"collection","type":"address","internalType":"address"},{"name":"amount","type":"uint96","internalType":"uint96"}]},{"name":"price","type":"uint128","internalType":"Price"},{"name":"expiry","type":"uint64","internalType":"uint64"},{"name":"salt","type":"uint64","internalType":"uint64"}]}]}],"outputs":[{"name":"successes","type":"bool[]","internalType":"bool[]"}],"stateMutability":"payable"}],"bytecode":{"object":"0x","sourceMap":"","linkReferences":{}},"deployedBytecode":{"object":"0x","sourceMap":"","linkReferences":{}},"methodIdentifiers":{"cancelOrders(bytes32[])":"21c77c96","editOrders((bytes32,(uint8,uint8,address,(uint256,address,uint96),uint128,uint64,uint64))[])":"e8f27e95","makeOrders((uint8,uint8,address,(uint256,address,uint96),uint128,uint64,uint64)[])":"307725d9","matchOrder((uint8,uint8,address,(uint256,address,uint96),uint128,uint64,uint64),(uint8,uint8,address,(uint256,address,uint96),uint128,uint64,uint64))":"882849c9","matchOrders(((uint8,uint8,address,(uint256,address,uint96),uint128,uint64,uint64),(uint8,uint8,address,(uint256,address,uint96),uint128,uint64,uint64))[])":"fe971c98"},"rawMetadata":"{\"compiler\":{\"version\":\"0.8.30+commit.73712a01\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"OrderKey[]\",\"name\":\"orderKeys\",\"type\":\"bytes32[]\"}],\"name\":\"cancelOrders\",\"outputs\":[{\"internalType\":\"bool[]\",\"name\":\"successes\",\"type\":\"bool[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"OrderKey\",\"name\":\"oldOrderKey\",\"type\":\"bytes32\"},{\"components\":[{\"internalType\":\"enum LibOrder.Side\",\"name\":\"side\",\"type\":\"uint8\"},{\"internalType\":\"enum LibOrder.SaleKind\",\"name\":\"saleKind\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"maker\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"collection\",\"type\":\"address\"},{\"internalType\":\"uint96\",\"name\":\"amount\",\"type\":\"uint96\"}],\"internalType\":\"struct LibOrder.Asset\",\"name\":\"nft\",\"type\":\"tuple\"},{\"internalType\":\"Price\",\"name\":\"price\",\"type\":\"uint128\"},{\"internalType\":\"uint64\",\"name\":\"expiry\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"salt\",\"type\":\"uint64\"}],\"internalType\":\"struct LibOrder.Order\",\"name\":\"newOrder\",\"type\":\"tuple\"}],\"internalType\":\"struct LibOrder.EditDetail[]\",\"name\":\"editDetails\",\"type\":\"tuple[]\"}],\"name\":\"editOrders\",\"outputs\":[{\"internalType\":\"OrderKey[]\",\"name\":\"newOrderKeys\",\"type\":\"bytes32[]\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"enum LibOrder.Side\",\"name\":\"side\",\"type\":\"uint8\"},{\"internalType\":\"enum LibOrder.SaleKind\",\"name\":\"saleKind\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"maker\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"collection\",\"type\":\"address\"},{\"internalType\":\"uint96\",\"name\":\"amount\",\"type\":\"uint96\"}],\"internalType\":\"struct LibOrder.Asset\",\"name\":\"nft\",\"type\":\"tuple\"},{\"internalType\":\"Price\",\"name\":\"price\",\"type\":\"uint128\"},{\"internalType\":\"uint64\",\"name\":\"expiry\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"salt\",\"type\":\"uint64\"}],\"internalType\":\"struct LibOrder.Order[]\",\"name\":\"newOrders\",\"type\":\"tuple[]\"}],\"name\":\"makeOrders\",\"outputs\":[{\"internalType\":\"OrderKey[]\",\"name\":\"newOrderKeys\",\"type\":\"bytes32[]\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"enum LibOrder.Side\",\"name\":\"side\",\"type\":\"uint8\"},{\"internalType\":\"enum LibOrder.SaleKind\",\"name\":\"saleKind\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"maker\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"collection\",\"type\":\"address\"},{\"internalType\":\"uint96\",\"name\":\"amount\",\"type\":\"uint96\"}],\"internalType\":\"struct LibOrder.Asset\",\"name\":\"nft\",\"type\":\"tuple\"},{\"internalType\":\"Price\",\"name\":\"price\",\"type\":\"uint128\"},{\"internalType\":\"uint64\",\"name\":\"expiry\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"salt\",\"type\":\"uint64\"}],\"internalType\":\"struct LibOrder.Order\",\"name\":\"sellOrder\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"enum LibOrder.Side\",\"name\":\"side\",\"type\":\"uint8\"},{\"internalType\":\"enum LibOrder.SaleKind\",\"name\":\"saleKind\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"maker\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"collection\",\"type\":\"address\"},{\"internalType\":\"uint96\",\"name\":\"amount\",\"type\":\"uint96\"}],\"internalType\":\"struct LibOrder.Asset\",\"name\":\"nft\",\"type\":\"tuple\"},{\"internalType\":\"Price\",\"name\":\"price\",\"type\":\"uint128\"},{\"internalType\":\"uint64\",\"name\":\"expiry\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"salt\",\"type\":\"uint64\"}],\"internalType\":\"struct LibOrder.Order\",\"name\":\"buyOrder\",\"type\":\"tuple\"}],\"name\":\"matchOrder\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"components\":[{\"internalType\":\"enum LibOrder.Side\",\"name\":\"side\",\"type\":\"uint8\"},{\"internalType\":\"enum LibOrder.SaleKind\",\"name\":\"saleKind\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"maker\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"collection\",\"type\":\"address\"},{\"internalType\":\"uint96\",\"name\":\"amount\",\"type\":\"uint96\"}],\"internalType\":\"struct LibOrder.Asset\",\"name\":\"nft\",\"type\":\"tuple\"},{\"internalType\":\"Price\",\"name\":\"price\",\"type\":\"uint128\"},{\"internalType\":\"uint64\",\"name\":\"expiry\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"salt\",\"type\":\"uint64\"}],\"internalType\":\"struct LibOrder.Order\",\"name\":\"sellOrder\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"enum LibOrder.Side\",\"name\":\"side\",\"type\":\"uint8\"},{\"internalType\":\"enum LibOrder.SaleKind\",\"name\":\"saleKind\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"maker\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"collection\",\"type\":\"address\"},{\"internalType\":\"uint96\",\"name\":\"amount\",\"type\":\"uint96\"}],\"internalType\":\"struct LibOrder.Asset\",\"name\":\"nft\",\"type\":\"tuple\"},{\"internalType\":\"Price\",\"name\":\"price\",\"type\":\"uint128\"},{\"internalType\":\"uint64\",\"name\":\"expiry\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"salt\",\"type\":\"uint64\"}],\"internalType\":\"struct LibOrder.Order\",\"name\":\"buyOrder\",\"type\":\"tuple\"}],\"internalType\":\"struct LibOrder.MatchDetail[]\",\"name\":\"matchDetails\",\"type\":\"tuple[]\"}],\"name\":\"matchOrders\",\"outputs\":[{\"internalType\":\"bool[]\",\"name\":\"successes\",\"type\":\"bool[]\"}],\"stateMutability\":\"payable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"cancelOrders(bytes32[])\":{\"params\":{\"orderKeys\":\"The array of order keys to cancel.\"},\"returns\":{\"successes\":\"Array of boolean values indicating the success of each cancellation.\"}},\"editOrders((bytes32,(uint8,uint8,address,(uint256,address,uint96),uint128,uint64,uint64))[])\":{\"details\":\"newOrder's saleKind, side, maker, and nft must match the corresponding order of oldOrderKey, otherwise it will be skipped; only the price can be modified.newOrder's expiry and salt can be regenerated.\",\"params\":{\"editDetails\":\"The edit details of oldOrderKey and new order info\"},\"returns\":{\"newOrderKeys\":\"The unique id of the order is returned in order, if the id is empty, the corresponding order was not edit correctly.\"}},\"makeOrders((uint8,uint8,address,(uint256,address,uint96),uint128,uint64,uint64)[])\":{\"details\":\"If Side=List, you need to authorize the EasySwapOrderBook contract first (creating a List order will transfer the NFT to the order pool).If Side=Bid, you need to pass {value}: the price of the bid (similarly, creating a Bid order will transfer ETH to the order pool).order.maker needs to be msg.sender.order.price cannot be 0.order.expiry needs to be greater than block.timestamp, or 0.order.salt cannot be 0.\",\"params\":{\"newOrders\":\"Multiple order structure data.\"},\"returns\":{\"newOrderKeys\":\"The unique id of the order is returned in order, if the id is empty, the corresponding order was not created correctly.\"}},\"matchOrders(((uint8,uint8,address,(uint256,address,uint96),uint128,uint64,uint64),(uint8,uint8,address,(uint256,address,uint96),uint128,uint64,uint64))[])\":{\"details\":\"Matches multiple orders atomically.If buying NFT, use the \\\"valid sellOrder order\\\" and construct a matching buyOrder order for order matching:buyOrder.side = Bid, buyOrder.saleKind = FixedPriceForItem, buyOrder.maker = msg.sender,nft and price values are the same as sellOrder, buyOrder.expiry > block.timestamp, buyOrder.salt != 0;If selling NFT, use the \\\"valid buyOrder order\\\" and construct a matching sellOrder order for order matching:sellOrder.side = List, sellOrder.saleKind = FixedPriceForItem, sellOrder.maker = msg.sender,nft and price values are the same as buyOrder, sellOrder.expiry > block.timestamp, sellOrder.salt != 0;\",\"params\":{\"matchDetails\":\"Array of `MatchDetail` structs containing the details of sell and buy order to be matched.\"},\"returns\":{\"successes\":\"Array of boolean values indicating the success of each match.\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"cancelOrders(bytes32[])\":{\"notice\":\"Cancels multiple orders by their order keys.\"},\"editOrders((bytes32,(uint8,uint8,address,(uint256,address,uint96),uint128,uint64,uint64))[])\":{\"notice\":\"Cancels multiple orders by their order keys.\"},\"makeOrders((uint8,uint8,address,(uint256,address,uint96),uint128,uint64,uint64)[])\":{\"notice\":\"Create multiple orders and transfer related assets.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/contracts/interface/IEasySwapOrderBook.sol\":\"IEasySwapOrderBook\"},\"evmVersion\":\"prague\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[\":@openzeppelin/contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/contracts/\",\":@openzeppelin/contracts/=lib/openzeppelin-contracts/contracts/\",\":ERC721A/=lib/ERC721A/contracts/\",\":erc4626-tests/=lib/openzeppelin-contracts-upgradeable/lib/erc4626-tests/\",\":forge-std/=lib/forge-std/src/\",\":halmos-cheatcodes/=lib/openzeppelin-contracts-upgradeable/lib/halmos-cheatcodes/src/\",\":openzeppelin-contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/\",\":openzeppelin-contracts/=lib/openzeppelin-contracts/\"]},\"sources\":{\"src/contracts/interface/IEasySwapOrderBook.sol\":{\"keccak256\":\"0x22d658c8c3d4e00198bb25145919e4a85c37aee72e7194a277dd61cb3488bcc6\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://87422d4a96103a86a116204080ef0e8d989cf5c013a2cc21344cfac954fa2604\",\"dweb:/ipfs/QmZDq21HNVzn34PRM5wfsp8WExbsHFJNZ4FMpeGpQyLiVF\"]},\"src/contracts/libraries/LibOrder.sol\":{\"keccak256\":\"0xc60253dedea607ffcbb4d3c7866751d625db13116bbfbf88edefb700c48ffb7d\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://adecfe217da469694475d94b6c56f07821f11325d815c43bc5e6c7cba050c53d\",\"dweb:/ipfs/QmNbrogaD7e1segv33Rcu6tPJfmiEM23UCTZiZn3kRkGZT\"]},\"src/contracts/libraries/RedBlackTreeLibrary.sol\":{\"keccak256\":\"0x9112ebd04d5b8e63eca449484eff042a2dfba2b99e53d09700825e55655ad9e9\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://dad2b6239640243fd8549ef2f0809d5573f48c388b7ff43d54b295a151e63281\",\"dweb:/ipfs/QmVpzouYBXAcCdzmc3w1tb6dPWe6XNUYKgxhJpp2Q9Dc3W\"]}},\"version\":1}","metadata":{"compiler":{"version":"0.8.30+commit.73712a01"},"language":"Solidity","output":{"abi":[{"inputs":[{"internalType":"OrderKey[]","name":"orderKeys","type":"bytes32[]"}],"stateMutability":"nonpayable","type":"function","name":"cancelOrders","outputs":[{"internalType":"bool[]","name":"successes","type":"bool[]"}]},{"inputs":[{"internalType":"struct LibOrder.EditDetail[]","name":"editDetails","type":"tuple[]","components":[{"internalType":"OrderKey","name":"oldOrderKey","type":"bytes32"},{"internalType":"struct LibOrder.Order","name":"newOrder","type":"tuple","components":[{"internalType":"enum LibOrder.Side","name":"side","type":"uint8"},{"internalType":"enum LibOrder.SaleKind","name":"saleKind","type":"uint8"},{"internalType":"address","name":"maker","type":"address"},{"internalType":"struct LibOrder.Asset","name":"nft","type":"tuple","components":[{"internalType":"uint256","name":"tokenId","type":"uint256"},{"internalType":"address","name":"collection","type":"address"},{"internalType":"uint96","name":"amount","type":"uint96"}]},{"internalType":"Price","name":"price","type":"uint128"},{"internalType":"uint64","name":"expiry","type":"uint64"},{"internalType":"uint64","name":"salt","type":"uint64"}]}]}],"stateMutability":"payable","type":"function","name":"editOrders","outputs":[{"internalType":"OrderKey[]","name":"newOrderKeys","type":"bytes32[]"}]},{"inputs":[{"internalType":"struct LibOrder.Order[]","name":"newOrders","type":"tuple[]","components":[{"internalType":"enum LibOrder.Side","name":"side","type":"uint8"},{"internalType":"enum LibOrder.SaleKind","name":"saleKind","type":"uint8"},{"internalType":"address","name":"maker","type":"address"},{"internalType":"struct LibOrder.Asset","name":"nft","type":"tuple","components":[{"internalType":"uint256","name":"tokenId","type":"uint256"},{"internalType":"address","name":"collection","type":"address"},{"internalType":"uint96","name":"amount","type":"uint96"}]},{"internalType":"Price","name":"price","type":"uint128"},{"internalType":"uint64","name":"expiry","type":"uint64"},{"internalType":"uint64","name":"salt","type":"uint64"}]}],"stateMutability":"payable","type":"function","name":"makeOrders","outputs":[{"internalType":"OrderKey[]","name":"newOrderKeys","type":"bytes32[]"}]},{"inputs":[{"internalType":"struct LibOrder.Order","name":"sellOrder","type":"tuple","components":[{"internalType":"enum LibOrder.Side","name":"side","type":"uint8"},{"internalType":"enum LibOrder.SaleKind","name":"saleKind","type":"uint8"},{"internalType":"address","name":"maker","type":"address"},{"internalType":"struct LibOrder.Asset","name":"nft","type":"tuple","components":[{"internalType":"uint256","name":"tokenId","type":"uint256"},{"internalType":"address","name":"collection","type":"address"},{"internalType":"uint96","name":"amount","type":"uint96"}]},{"internalType":"Price","name":"price","type":"uint128"},{"internalType":"uint64","name":"expiry","type":"uint64"},{"internalType":"uint64","name":"salt","type":"uint64"}]},{"internalType":"struct LibOrder.Order","name":"buyOrder","type":"tuple","components":[{"internalType":"enum LibOrder.Side","name":"side","type":"uint8"},{"internalType":"enum LibOrder.SaleKind","name":"saleKind","type":"uint8"},{"internalType":"address","name":"maker","type":"address"},{"internalType":"struct LibOrder.Asset","name":"nft","type":"tuple","components":[{"internalType":"uint256","name":"tokenId","type":"uint256"},{"internalType":"address","name":"collection","type":"address"},{"internalType":"uint96","name":"amount","type":"uint96"}]},{"internalType":"Price","name":"price","type":"uint128"},{"internalType":"uint64","name":"expiry","type":"uint64"},{"internalType":"uint64","name":"salt","type":"uint64"}]}],"stateMutability":"payable","type":"function","name":"matchOrder"},{"inputs":[{"internalType":"struct LibOrder.MatchDetail[]","name":"matchDetails","type":"tuple[]","components":[{"internalType":"struct LibOrder.Order","name":"sellOrder","type":"tuple","components":[{"internalType":"enum LibOrder.Side","name":"side","type":"uint8"},{"internalType":"enum LibOrder.SaleKind","name":"saleKind","type":"uint8"},{"internalType":"address","name":"maker","type":"address"},{"internalType":"struct LibOrder.Asset","name":"nft","type":"tuple","components":[{"internalType":"uint256","name":"tokenId","type":"uint256"},{"internalType":"address","name":"collection","type":"address"},{"internalType":"uint96","name":"amount","type":"uint96"}]},{"internalType":"Price","name":"price","type":"uint128"},{"internalType":"uint64","name":"expiry","type":"uint64"},{"internalType":"uint64","name":"salt","type":"uint64"}]},{"internalType":"struct LibOrder.Order","name":"buyOrder","type":"tuple","components":[{"internalType":"enum LibOrder.Side","name":"side","type":"uint8"},{"internalType":"enum LibOrder.SaleKind","name":"saleKind","type":"uint8"},{"internalType":"address","name":"maker","type":"address"},{"internalType":"struct LibOrder.Asset","name":"nft","type":"tuple","components":[{"internalType":"uint256","name":"tokenId","type":"uint256"},{"internalType":"address","name":"collection","type":"address"},{"internalType":"uint96","name":"amount","type":"uint96"}]},{"internalType":"Price","name":"price","type":"uint128"},{"internalType":"uint64","name":"expiry","type":"uint64"},{"internalType":"uint64","name":"salt","type":"uint64"}]}]}],"stateMutability":"payable","type":"function","name":"matchOrders","outputs":[{"internalType":"bool[]","name":"successes","type":"bool[]"}]}],"devdoc":{"kind":"dev","methods":{"cancelOrders(bytes32[])":{"params":{"orderKeys":"The array of order keys to cancel."},"returns":{"successes":"Array of boolean values indicating the success of each cancellation."}},"editOrders((bytes32,(uint8,uint8,address,(uint256,address,uint96),uint128,uint64,uint64))[])":{"details":"newOrder's saleKind, side, maker, and nft must match the corresponding order of oldOrderKey, otherwise it will be skipped; only the price can be modified.newOrder's expiry and salt can be regenerated.","params":{"editDetails":"The edit details of oldOrderKey and new order info"},"returns":{"newOrderKeys":"The unique id of the order is returned in order, if the id is empty, the corresponding order was not edit correctly."}},"makeOrders((uint8,uint8,address,(uint256,address,uint96),uint128,uint64,uint64)[])":{"details":"If Side=List, you need to authorize the EasySwapOrderBook contract first (creating a List order will transfer the NFT to the order pool).If Side=Bid, you need to pass {value}: the price of the bid (similarly, creating a Bid order will transfer ETH to the order pool).order.maker needs to be msg.sender.order.price cannot be 0.order.expiry needs to be greater than block.timestamp, or 0.order.salt cannot be 0.","params":{"newOrders":"Multiple order structure data."},"returns":{"newOrderKeys":"The unique id of the order is returned in order, if the id is empty, the corresponding order was not created correctly."}},"matchOrders(((uint8,uint8,address,(uint256,address,uint96),uint128,uint64,uint64),(uint8,uint8,address,(uint256,address,uint96),uint128,uint64,uint64))[])":{"details":"Matches multiple orders atomically.If buying NFT, use the \"valid sellOrder order\" and construct a matching buyOrder order for order matching:buyOrder.side = Bid, buyOrder.saleKind = FixedPriceForItem, buyOrder.maker = msg.sender,nft and price values are the same as sellOrder, buyOrder.expiry > block.timestamp, buyOrder.salt != 0;If selling NFT, use the \"valid buyOrder order\" and construct a matching sellOrder order for order matching:sellOrder.side = List, sellOrder.saleKind = FixedPriceForItem, sellOrder.maker = msg.sender,nft and price values are the same as buyOrder, sellOrder.expiry > block.timestamp, sellOrder.salt != 0;","params":{"matchDetails":"Array of `MatchDetail` structs containing the details of sell and buy order to be matched."},"returns":{"successes":"Array of boolean values indicating the success of each match."}}},"version":1},"userdoc":{"kind":"user","methods":{"cancelOrders(bytes32[])":{"notice":"Cancels multiple orders by their order keys."},"editOrders((bytes32,(uint8,uint8,address,(uint256,address,uint96),uint128,uint64,uint64))[])":{"notice":"Cancels multiple orders by their order keys."},"makeOrders((uint8,uint8,address,(uint256,address,uint96),uint128,uint64,uint64)[])":{"notice":"Create multiple orders and transfer related assets."}},"version":1}},"settings":{"remappings":["@openzeppelin/contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/contracts/","@openzeppelin/contracts/=lib/openzeppelin-contracts/contracts/","ERC721A/=lib/ERC721A/contracts/","erc4626-tests/=lib/openzeppelin-contracts-upgradeable/lib/erc4626-tests/","forge-std/=lib/forge-std/src/","halmos-cheatcodes/=lib/openzeppelin-contracts-upgradeable/lib/halmos-cheatcodes/src/","openzeppelin-contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/","openzeppelin-contracts/=lib/openzeppelin-contracts/"],"optimizer":{"enabled":false,"runs":200},"metadata":{"bytecodeHash":"ipfs"},"compilationTarget":{"src/contracts/interface/IEasySwapOrderBook.sol":"IEasySwapOrderBook"},"evmVersion":"prague","libraries":{}},"sources":{"src/contracts/interface/IEasySwapOrderBook.sol":{"keccak256":"0x22d658c8c3d4e00198bb25145919e4a85c37aee72e7194a277dd61cb3488bcc6","urls":["bzz-raw://87422d4a96103a86a116204080ef0e8d989cf5c013a2cc21344cfac954fa2604","dweb:/ipfs/QmZDq21HNVzn34PRM5wfsp8WExbsHFJNZ4FMpeGpQyLiVF"],"license":"MIT"},"src/contracts/libraries/LibOrder.sol":{"keccak256":"0xc60253dedea607ffcbb4d3c7866751d625db13116bbfbf88edefb700c48ffb7d","urls":["bzz-raw://adecfe217da469694475d94b6c56f07821f11325d815c43bc5e6c7cba050c53d","dweb:/ipfs/QmNbrogaD7e1segv33Rcu6tPJfmiEM23UCTZiZn3kRkGZT"],"license":"MIT"},"src/contracts/libraries/RedBlackTreeLibrary.sol":{"keccak256":"0x9112ebd04d5b8e63eca449484eff042a2dfba2b99e53d09700825e55655ad9e9","urls":["bzz-raw://dad2b6239640243fd8549ef2f0809d5573f48c388b7ff43d54b295a151e63281","dweb:/ipfs/QmVpzouYBXAcCdzmc3w1tb6dPWe6XNUYKgxhJpp2Q9Dc3W"],"license":"MIT"}},"version":1},"id":39}